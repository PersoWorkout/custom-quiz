// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  quizzes       Quizzes[]
  quizParticipation QuizzesParticipants[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuizzesParticipants {
  id String @id @default(cuid())
  user_id String 
  quiz_id String 

  quiz Quizzes @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  responses ParticipantsResponses[]
}

model Quizzes {
  id String @id @default(cuid())
  title String
  description String
  user_id String
  created_at DateTime @default(now())
  expired_at DateTime?

  participants QuizzesParticipants[]
  questions Questions[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Questions{
  id String @id @default(cuid())
  question String
  quiz_id String 
  created_at DateTime @default(now())

  quiz Quizzes @relation(fields: [quiz_id], references: [id], onDelete:  Cascade)
  options QuestionsOptions[]
}

model QuestionsOptions {
  id String @id @default(cuid())
  option String
  question_id String
  color String?
  is_correct Boolean

  question Questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  participants ParticipantsResponses[]
}

model ParticipantsResponses {
  question_option_id String @unique
  participant_id String @unique

  question_option QuestionsOptions @relation(fields: [question_option_id], references: [id])
  participants QuizzesParticipants @relation(fields: [participant_id], references: [id])

  @@id([question_option_id, participant_id])
}





